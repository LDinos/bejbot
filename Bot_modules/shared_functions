/* eslint-disable max-statements-per-line */
/* eslint-disable no-inline-comments */
const { EmbedBuilder } = require('discord.js');
const ConvertToEmoji = require('./emoji_table.js');
const gem_skins = ['r', 'w', 'g', 'y', 'p', 'o', 'b'];
const points_from_match = [0, 0, 100, 125, 150, 200, 300, 500]; // Points you get for each x-match
const delay = 2000; // Timeout delay when matching gems

function initialize_board(current_game, rows, cols) { // Create board for the first time
	const num_skins = current_game.rules.num_skins;
	let board;
	do {
		board = [];
		for(let i = 0; i < rows; i++) {
			board[i] = [];
			for(let j = 0; j < cols; j++) {
				board[i][j] = { skin : gem_skins[get_random(num_skins)], power : '' };
			}
		}

	} while(board_has_matches(board));

	return board;
}

function check_swap_command(current_game, args, xcoord, ycoord) { // check if swapping is possible
	if (current_game !== undefined) {
		if (args[0] <= 8 && args[0] > 0 && args[1] <= 8 && args[1] > 0) {
			if (xcoord <= 8 && xcoord > 0 && ycoord <= 8 && ycoord > 0) {
				if (xcoord !== args[0] || ycoord !== args[1]) { // if the direction word is none of the 4 (up,down etc..), the gem wont swap anywhere
					return 'Swap okay';
				}
				else {return 'The format of command is ```+swap [row] [column] [up/down/left/right]```';}
			}
			else {return 'You can\'t swap there!';}
		}
		else {return 'Arguments row and column must not exceed or fall short of board size';}
	}
	else {return 'You need to start a game first before trying to swap! Type ```+start_game```';}
}

function board_has_matches(board) { // check if there are matches already in the board at its initial spawn
	for(let i = 0; i < 8; i++) {
		let n_hor = 1;
		let n_ver = 1;
		for(let j = 1; j < 8; j++) {
			if (board[i][j].skin === board[i][j - 1].skin) n_hor++;
			else n_hor = 1;
			if (n_hor >= 3) return true;

			if (board[j][i].skin === board[j - 1][i].skin) n_ver++;
			else n_ver = 1;
			if (n_ver >= 3) return true;
		}
	}
	return false;
}

function execute_matches(current_game, board) { // find matches and destroy the gems that got matched
	let matches_found = 0;
	const matched_gems = [];
	for(let i = 0; i < 8; i++) {
		let n_hor = 1;
		let n_ver = 1;
		let is_same_color = false;
		for(let j = 1; j < 8; j++) {

			is_same_color = false;
			if (board[i][j].skin === board[i][j - 1].skin) {n_hor++; is_same_color = true;}
			if (((j === 7 && is_same_color) || (!is_same_color)) && n_hor >= 3) { // execute horizontal matches here
				for(let k = j - n_hor + is_same_color; k < j + is_same_color; k++) {
					matched_gems.push(board[i][k]);
				}
				matches_found++;
				current_game.stats.score += points_from_match[n_hor - 1] * (current_game.stats.cascades + 1);
				n_hor = 1;
			}
			else if (!is_same_color) {n_hor = 1;}

			is_same_color = false;
			if (board[j][i].skin === board[j - 1][i].skin) {n_ver++; is_same_color = true;}
			if (((j === 7 && is_same_color) || (!is_same_color)) && n_ver >= 3) { // execute vertical matches here
				for(let k = j - n_ver + is_same_color; k < j + is_same_color; k++) {
					matched_gems.push(board[k][i]);
				}
				matches_found++;
				current_game.stats.score += points_from_match[n_ver - 1] * (current_game.stats.cascades + 1);
				n_ver = 1;
			}
			else if (!is_same_color) {n_ver = 1;}
		}
	}
	for(let i = 0; i < matched_gems.length; i++) matched_gems[i].skin = -1;
	return matches_found;
}

function message_create_board_array(message) { // create a board array depending on what the user has written
	const board_array = [];
	for(const row of message) { // gem rows (if u write two rows of g g, this will return ['g g', 'g g']){
		const array = [];
		let i_start = 0;
		for(let i = 0; i < row.length; i++) {// each character from each row (for example from the first row we get ['g', 'g'])
			if (row[i] !== ' ') {
				const m = row[i];
				let p = '';
				let cont = false;
				if (i !== row.length - 1) { // if we are not at the end of the row message
					if (row[i + 1] !== ' ') { // and the character after this is not empty (=power)
						p = row[i + 1]; // get the power
						cont = true; // and make j++ since we checked two characters at once
					}
				}
				array[i_start] = { skin : m, power : p };
				i_start++;
				if (cont) i++;
			}
		}

		board_array.push(array);
	}
	return board_array;
}

function message_get_board(message) { // create an emoji board string depending on what the user has written (used in +board)
	let msg_returned = '';
	for(const row of message) { // gem rows
		for(let i = 0; i < row.length; i++) {// each row character
			if (row[i] !== ' ') {
				let m = row[i];
				if (i !== row.length - 1) if (row[i + 1] !== ' ') {m += row[i + 1]; i++;}
				msg_returned += ConvertToEmoji(m);
			}
			else {msg_returned += ' ';}
		}
		msg_returned += '\n';
	}
	return msg_returned;
}

function messagify_board(current_game, initial_text) { // Take all gems and write them in a message format string
	for(let i = 0; i < 8; i++) {
		initial_text += '\n';
		for(let j = 0; j < 8; j++) {
			const gem = current_game.board[i][j];
			initial_text += ConvertToEmoji(gem.skin + gem.power) + ' ';
		}
	}
	let state = 'Ready!';
	if (current_game.state === 'moving') state = 'Standby...';
	else if (current_game.state === 'replay') state = 'Replaying...';
	const footer_text = `Last move made by ${current_game.stats.last_move.user}`;
	const footer_avatar = current_game.stats.last_move.user != 'None' ? current_game.stats.last_move.user_avatar : 'https://cdn.discordapp.com/embed/avatars/0.png';
	const emb = new EmbedBuilder()
		.setDescription(initial_text)
		.addFields(
			{ name: 'Score', value: current_game.stats.score.toString() },
			{ name: 'Cascades', value: current_game.stats.cascades.toString() },
			{ name: 'Last move', value: current_game.stats.last_move.row.toString() + ' , ' + current_game.stats.last_move.col.toString() },
			{ name: 'State', value: state },
		)
		.setAuthor({ name : current_game.creator.username, iconURL: current_game.creator.avatarURL() })
		.setFooter({ text : footer_text, iconURL : footer_avatar }); // ,  }
	return emb;
}

function spawn_new_gems(current_game) { // spawn new gems after a match happened
	if (current_game.state === 'replay') {
		const frame = current_game.current_replay_frame++;
		current_game.board = current_game.replay[frame];
		if (frame < current_game.replay.length - 1) {
			current_game.current_message.edit({ embeds : [messagify_board(current_game, '\n')] }).then(() => {
				current_game.timeout = setTimeout(check_cascade_matches, delay, current_game);
			});
		}
		else {
			current_game.state = 'stable';
			current_game.current_replay_frame = 0;
			current_game.current_message.edit({ embeds : [messagify_board(current_game, '\n')] });
		}
	}
	else {
		const num_skins = current_game.rules.num_skins;
		for(let j = 0; j < 8; j++) {
			let k_end = 7;
			for(let i = k_end; i >= 0; i--) {
				if (current_game.board[i][j].skin !== -1) {
					const temp = current_game.board[k_end][j];
					current_game.board[k_end][j] = current_game.board[i][j];
					current_game.board[i][j] = temp;
					k_end--;
				}
			}
			for(let k = 0; k < k_end + 1; k++) {
				current_game.board[k][j].skin = gem_skins[get_random(num_skins)];
				current_game.board[k][j].power = '';
			}
		}
		add_replay_frame(current_game);
		current_game.current_message.edit({ embeds : [messagify_board(current_game, '\n')] }).then(() => {
			current_game.timeout = setTimeout(check_cascade_matches, delay, current_game);
		});
	}
}

function check_cascade_matches(current_game) { // check if there are cascades after new gems spawned after a match
	if (current_game.state === 'replay') {
		const frame = current_game.current_replay_frame++;
		current_game.board = current_game.replay[frame];
		current_game.current_message.edit({ embeds : [messagify_board(current_game, '\n')] }).then(() =>{
			current_game.timeout = setTimeout(spawn_new_gems, delay, current_game);
		});
	}
	else {
		const matches_found = execute_matches(current_game, current_game.board);
		if (matches_found) {
			add_replay_frame(current_game);
			current_game.stats.cascades++;
			current_game.current_message.edit({ embeds : [messagify_board(current_game, '\n')] }).then(() =>{
				current_game.timeout = setTimeout(spawn_new_gems, delay, current_game);
			});
		}
		else {
			current_game.state = 'stable';
			current_game.current_message.edit({ embeds : [messagify_board(current_game, '\n')] });
		}
	}
}

function add_replay_frame(current_game) { // add board on last position of replay array
	const len = current_game.replay.length;
	current_game.replay[len] = JSON.parse(JSON.stringify(current_game.board));// current_game.board.slice()
}

function get_random(end_range) { // find random number between 0 and end_range-1
	return Math.floor(Math.random() * end_range);
}

module.exports = { initialize_board, check_swap_command, board_has_matches,
	execute_matches, message_create_board_array, message_get_board, messagify_board,
	spawn_new_gems, check_cascade_matches, add_replay_frame, get_random,
	gem_skins, points_from_match, delay };